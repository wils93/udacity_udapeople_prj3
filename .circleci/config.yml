version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0

  aws:
    docker:
      - image: amazon/aws-cli

  python:
    docker:
      - image: python:3.9.0-alpine

commands:
  install-dep:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: npm install
          working_directory: ./<< parameters.path >>
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.path >>/node_modules

  build:
    parameters:
      path:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: build << parameters.path >>
          working_directory: ./<< parameters.path >>
          command: npm run build

  test:
    parameters:
      path:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: test << parameters.path >>
          working_directory: ./<< parameters.path >>
          command: npm run test

  scan:
    parameters:
      path:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: scan << parameters.path >>
          working_directory: ./<< parameters.path >>
          command: |
            npm i
            npm audit fix --audit-level=critical --force

jobs:
  install-backend-dep:
    executor: node
    steps:
      - checkout
      - install-dep:
          path: backend

  install-frontend-dep:
    executor: node
    steps:
      - checkout
      - install-dep:
          path: frontend

  build-backend:
    executor: node
    steps:
      - checkout
      - build:
          path: backend

  build-frontend:
    executor: node
    steps:
      - checkout
      - build:
          path: frontend

  test-backend:
    executor: node
    steps:
      - checkout
      - test:
          path: backend

  test-frontend:
    executor: node
    steps:
      - checkout
      - test:
          path: frontend

  scan-backend:
    executor: node
    steps:
      - checkout
      - scan:
          path: backend

  scan-frontend:
    executor: node
    steps:
      - checkout
      - scan:
          path: frontend

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add backend IP to inventory file & memstash
          command: |
            backend_ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo Backend IP: $backend_ip
            echo $backend_ip >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request PUT --data "$backend_ip" https://api.memstash.io/values/backend_ip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0f:53:ba:92:71:d4:d8:cf:3e:b0:87:07:3b:d2:94:50"]
      - attach_workspace:
          at: .
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Install curl
          command: |
            apk add --update curl
      - run:
          name: Configure backend server
          working_directory: ./.circleci/ansible
          command: |
            backend_ip=$(curl -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request GET https://api.memstash.io/values/backend_ip)
            cat inventory.txt
            echo Backend IP: $backend_ip
            ansible-playbook -i inventory.txt configure-server.yml --extra-vars "backend_ip=$backend_ip"

  run-migrations:
    executor: node
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
          npm run migrations > migration_status
      - run:
          name: Check migration result and send to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "Migration was successful!"
              curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request PUT --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed"
              curl -H "Content-Type: text/plain" -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request PUT --data "failure" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

  deploy-frontend:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend URL
          working_directory: ./frontend
          command: |
            backend_ip=$(curl -H "token: dd8404ce-b1ff-4441-8c72-1765aeb9f088" \
              --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${backend_ip}:3030"
            echo $API_URL
            npm run build
      - run:
          name: Deploy frontend object to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive






workflows:
  default:
    jobs:
      - install-backend-dep
      - install-frontend-dep

      - build-backend:
          requires:
            - install-backend-dep
      - build-frontend:
          requires:
            - install-frontend-dep

      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend

      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend

      - deploy-infrastructure

      - configure-infrastructure:
          requires:
            - deploy-infrastructure

      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastrucutre

      - deploy-frontend:
          requires:
            - run-migrations